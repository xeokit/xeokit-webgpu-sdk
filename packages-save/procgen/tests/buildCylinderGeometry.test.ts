import { buildCylinderGeometry} from "../src/index";
import {TrianglesPrimitive} from "@xeokit/constants";
import {truncate} from "./testUtils";
import {SDKError} from "@xeokit/core";

describe('buildCylinderGeometry', function () {
    let geometry;

    it('Build geometry without error', () => {
        geometry = buildCylinderGeometry({
            center: [2, 3, 4],
            radiusTop: 1,
            radiusBottom: 1,
            height: 1,
            radialSegments: 60,
            heightSegments: 1,
            openEnded: false,
        });
        if (geometry instanceof SDKError) {
            throw geometry;
        }
    });

    it('Geometry has correct primitive type', () => {
        expect(geometry.primitive).toStrictEqual(TrianglesPrimitive);
    });

    it('Geometry has expected positions', () => {
        const positions = truncate(geometry.positions);
        expect(positions).toStrictEqual([2, 3.5, 5, 2.1, 3.5, 4.99, 2.21, 3.5, 4.98, 2.31, 3.5, 4.95, 2.41, 3.5, 4.91, 2.5, 3.5, 4.87, 2.59, 3.5, 4.81, 2.67, 3.5, 4.74, 2.74, 3.5, 4.67, 2.81, 3.5, 4.59, 2.87, 3.5, 4.5, 2.91, 3.5, 4.41, 2.95, 3.5, 4.31, 2.98, 3.5, 4.21, 2.99, 3.5, 4.1, 3, 3.5, 4, 2.99, 3.5, 3.9, 2.98, 3.5, 3.79, 2.95, 3.5, 3.69, 2.91, 3.5, 3.59, 2.87, 3.5, 3.5, 2.81, 3.5, 3.41, 2.74, 3.5, 3.33, 2.67, 3.5, 3.26, 2.59, 3.5, 3.19, 2.5, 3.5, 3.13, 2.41, 3.5, 3.09, 2.31, 3.5, 3.05, 2.21, 3.5, 3.02, 2.1, 3.5, 3.01, 2, 3.5, 3, 1.9, 3.5, 3.01, 1.79, 3.5, 3.02, 1.69, 3.5, 3.05, 1.59, 3.5, 3.09, 1.5, 3.5, 3.13, 1.41, 3.5, 3.19, 1.33, 3.5, 3.26, 1.26, 3.5, 3.33, 1.19, 3.5, 3.41, 1.13, 3.5, 3.5, 1.09, 3.5, 3.59, 1.05, 3.5, 3.69, 1.02, 3.5, 3.79, 1.01, 3.5, 3.9, 1, 3.5, 4, 1.01, 3.5, 4.1, 1.02, 3.5, 4.21, 1.05, 3.5, 4.31, 1.09, 3.5, 4.41, 1.13, 3.5, 4.5, 1.19, 3.5, 4.59, 1.26, 3.5, 4.67, 1.33, 3.5, 4.74, 1.41, 3.5, 4.81, 1.5, 3.5, 4.87, 1.59, 3.5, 4.91, 1.69, 3.5, 4.95, 1.79, 3.5, 4.98, 1.9, 3.5, 4.99, 2, 3.5, 5, 2, 2.5, 5, 2.1, 2.5, 4.99, 2.21, 2.5, 4.98, 2.31, 2.5, 4.95, 2.41, 2.5, 4.91, 2.5, 2.5, 4.87, 2.59, 2.5, 4.81, 2.67, 2.5, 4.74, 2.74, 2.5, 4.67, 2.81, 2.5, 4.59, 2.87, 2.5, 4.5, 2.91, 2.5, 4.41, 2.95, 2.5, 4.31, 2.98, 2.5, 4.21, 2.99, 2.5, 4.1, 3, 2.5, 4, 2.99, 2.5, 3.9, 2.98, 2.5, 3.79, 2.95, 2.5, 3.69, 2.91, 2.5, 3.59, 2.87, 2.5, 3.5, 2.81, 2.5, 3.41, 2.74, 2.5, 3.33, 2.67, 2.5, 3.26, 2.59, 2.5, 3.19, 2.5, 2.5, 3.13, 2.41, 2.5, 3.09, 2.31, 2.5, 3.05, 2.21, 2.5, 3.02, 2.1, 2.5, 3.01, 2, 2.5, 3, 1.9, 2.5, 3.01, 1.79, 2.5, 3.02, 1.69, 2.5, 3.05, 1.59, 2.5, 3.09, 1.5, 2.5, 3.13, 1.41, 2.5, 3.19, 1.33, 2.5, 3.26, 1.26, 2.5, 3.33, 1.19, 2.5, 3.41, 1.13, 2.5, 3.5, 1.09, 2.5, 3.59, 1.05, 2.5, 3.69, 1.02, 2.5, 3.79, 1.01, 2.5, 3.9, 1, 2.5, 4, 1.01, 2.5, 4.1, 1.02, 2.5, 4.21, 1.05, 2.5, 4.31, 1.09, 2.5, 4.41, 1.13, 2.5, 4.5, 1.19, 2.5, 4.59, 1.26, 2.5, 4.67, 1.33, 2.5, 4.74, 1.41, 2.5, 4.81, 1.5, 2.5, 4.87, 1.59, 2.5, 4.91, 1.69, 2.5, 4.95, 1.79, 2.5, 4.98, 1.9, 2.5, 4.99, 2, 2.5, 5, 2, 3.5, 4, 2, 3.5, 5, 2.1, 3.5, 4.99, 2.21, 3.5, 4.98, 2.31, 3.5, 4.95, 2.41, 3.5, 4.91, 2.5, 3.5, 4.87, 2.59, 3.5, 4.81, 2.67, 3.5, 4.74, 2.74, 3.5, 4.67, 2.81, 3.5, 4.59, 2.87, 3.5, 4.5, 2.91, 3.5, 4.41, 2.95, 3.5, 4.31, 2.98, 3.5, 4.21, 2.99, 3.5, 4.1, 3, 3.5, 4, 2.99, 3.5, 3.9, 2.98, 3.5, 3.79, 2.95, 3.5, 3.69, 2.91, 3.5, 3.59, 2.87, 3.5, 3.5, 2.81, 3.5, 3.41, 2.74, 3.5, 3.33, 2.67, 3.5, 3.26, 2.59, 3.5, 3.19, 2.5, 3.5, 3.13, 2.41, 3.5, 3.09, 2.31, 3.5, 3.05, 2.21, 3.5, 3.02, 2.1, 3.5, 3.01, 2, 3.5, 3, 1.9, 3.5, 3.01, 1.79, 3.5, 3.02, 1.69, 3.5, 3.05, 1.59, 3.5, 3.09, 1.5, 3.5, 3.13, 1.41, 3.5, 3.19, 1.33, 3.5, 3.26, 1.26, 3.5, 3.33, 1.19, 3.5, 3.41, 1.13, 3.5, 3.5, 1.09, 3.5, 3.59, 1.05, 3.5, 3.69, 1.02, 3.5, 3.79, 1.01, 3.5, 3.9, 1, 3.5, 4, 1.01, 3.5, 4.1, 1.02, 3.5, 4.21, 1.05, 3.5, 4.31, 1.09, 3.5, 4.41, 1.13, 3.5, 4.5, 1.19, 3.5, 4.59, 1.26, 3.5, 4.67, 1.33, 3.5, 4.74, 1.41, 3.5, 4.81, 1.5, 3.5, 4.87, 1.59, 3.5, 4.91, 1.69, 3.5, 4.95, 1.79, 3.5, 4.98, 1.9, 3.5, 4.99, 2, 3.5, 5, 2, 2.5, 4, 2, 2.5, 5, 2.1, 2.5, 4.99, 2.21, 2.5, 4.98, 2.31, 2.5, 4.95, 2.41, 2.5, 4.91, 2.5, 2.5, 4.87, 2.59, 2.5, 4.81, 2.67, 2.5, 4.74, 2.74, 2.5, 4.67, 2.81, 2.5, 4.59, 2.87, 2.5, 4.5, 2.91, 2.5, 4.41, 2.95, 2.5, 4.31, 2.98, 2.5, 4.21, 2.99, 2.5, 4.1, 3, 2.5, 4, 2.99, 2.5, 3.9, 2.98, 2.5, 3.79, 2.95, 2.5, 3.69, 2.91, 2.5, 3.59, 2.87, 2.5, 3.5, 2.81, 2.5, 3.41, 2.74, 2.5, 3.33, 2.67, 2.5, 3.26, 2.59, 2.5, 3.19, 2.5, 2.5, 3.13, 2.41, 2.5, 3.09, 2.31, 2.5, 3.05, 2.21, 2.5, 3.02, 2.1, 2.5, 3.01, 2, 2.5, 3, 1.9, 2.5, 3.01, 1.79, 2.5, 3.02, 1.69, 2.5, 3.05, 1.59, 2.5, 3.09, 1.5, 2.5, 3.13, 1.41, 2.5, 3.19, 1.33, 2.5, 3.26, 1.26, 2.5, 3.33, 1.19, 2.5, 3.41, 1.13, 2.5, 3.5, 1.09, 2.5, 3.59, 1.05, 2.5, 3.69, 1.02, 2.5, 3.79, 1.01, 2.5, 3.9, 1, 2.5, 4, 1.01, 2.5, 4.1, 1.02, 2.5, 4.21, 1.05, 2.5, 4.31, 1.09, 2.5, 4.41, 1.13, 2.5, 4.5, 1.19, 2.5, 4.59, 1.26, 2.5, 4.67, 1.33, 2.5, 4.74, 1.41, 2.5, 4.81, 1.5, 2.5, 4.87, 1.59, 2.5, 4.91, 1.69, 2.5, 4.95, 1.79, 2.5, 4.98, 1.9, 2.5, 4.99, 2, 2.5, 5]);
    });

    it('Geometry has correct UV coordinates', () => {
        const uv = truncate(geometry.uv);
        expect(uv).toStrictEqual([0, 0, 0.02, 0, 0.03, 0, 0.05, 0, 0.07, 0, 0.08, 0, 0.1, 0, 0.12, 0, 0.13, 0, 0.15, 0, 0.17, 0, 0.18, 0, 0.2, 0, 0.22, 0, 0.23, 0, 0.25, 0, 0.27, 0, 0.28, 0, 0.3, 0, 0.32, 0, 0.33, 0, 0.35, 0, 0.37, 0, 0.38, 0, 0.4, 0, 0.42, 0, 0.43, 0, 0.45, 0, 0.47, 0, 0.48, 0, 0.5, 0, 0.52, 0, 0.53, 0, 0.55, 0, 0.57, 0, 0.58, 0, 0.6, 0, 0.62, 0, 0.63, 0, 0.65, 0, 0.67, 0, 0.68, 0, 0.7, 0, 0.72, 0, 0.73, 0, 0.75, 0, 0.77, 0, 0.78, 0, 0.8, 0, 0.82, 0, 0.83, 0, 0.85, 0, 0.87, 0, 0.88, 0, 0.9, 0, 0.92, 0, 0.93, 0, 0.95, 0, 0.97, 0, 0.98, 0, 1, 0, 0, 1, 0.02, 1, 0.03, 1, 0.05, 1, 0.07, 1, 0.08, 1, 0.1, 1, 0.12, 1, 0.13, 1, 0.15, 1, 0.17, 1, 0.18, 1, 0.2, 1, 0.22, 1, 0.23, 1, 0.25, 1, 0.27, 1, 0.28, 1, 0.3, 1, 0.32, 1, 0.33, 1, 0.35, 1, 0.37, 1, 0.38, 1, 0.4, 1, 0.42, 1, 0.43, 1, 0.45, 1, 0.47, 1, 0.48, 1, 0.5, 1, 0.52, 1, 0.53, 1, 0.55, 1, 0.57, 1, 0.58, 1, 0.6, 1, 0.62, 1, 0.63, 1, 0.65, 1, 0.67, 1, 0.68, 1, 0.7, 1, 0.72, 1, 0.73, 1, 0.75, 1, 0.77, 1, 0.78, 1, 0.8, 1, 0.82, 1, 0.83, 1, 0.85, 1, 0.87, 1, 0.88, 1, 0.9, 1, 0.92, 1, 0.93, 1, 0.95, 1, 0.97, 1, 0.98, 1, 1, 1, 0.5, 0.5, 0.5, 1, 0.55, 1, 0.6, 0.99, 0.65, 0.98, 0.7, 0.96, 0.75, 0.93, 0.79, 0.9, 0.83, 0.87, 0.87, 0.83, 0.9, 0.79, 0.93, 0.75, 0.96, 0.7, 0.98, 0.65, 0.99, 0.6, 1, 0.55, 1, 0.5, 1, 0.45, 0.99, 0.4, 0.98, 0.35, 0.96, 0.3, 0.93, 0.25, 0.9, 0.21, 0.87, 0.17, 0.83, 0.13, 0.79, 0.1, 0.75, 0.07, 0.7, 0.04, 0.65, 0.02, 0.6, 0.01, 0.55, 0, 0.5, 0, 0.45, 0, 0.4, 0.01, 0.35, 0.02, 0.3, 0.04, 0.25, 0.07, 0.21, 0.1, 0.17, 0.13, 0.13, 0.17, 0.1, 0.21, 0.07, 0.25, 0.04, 0.3, 0.02, 0.35, 0.01, 0.4, 0, 0.45, 0, 0.5, 0, 0.55, 0.01, 0.6, 0.02, 0.65, 0.04, 0.7, 0.07, 0.75, 0.1, 0.79, 0.13, 0.83, 0.17, 0.87, 0.21, 0.9, 0.25, 0.93, 0.3, 0.96, 0.35, 0.98, 0.4, 0.99, 0.45, 1, 0.5, 1, 0.5, 0.5, 0.5, 1, 0.55, 1, 0.6, 0.99, 0.65, 0.98, 0.7, 0.96, 0.75, 0.93, 0.79, 0.9, 0.83, 0.87, 0.87, 0.83, 0.9, 0.79, 0.93, 0.75, 0.96, 0.7, 0.98, 0.65, 0.99, 0.6, 1, 0.55, 1, 0.5, 1, 0.45, 0.99, 0.4, 0.98, 0.35, 0.96, 0.3, 0.93, 0.25, 0.9, 0.21, 0.87, 0.17, 0.83, 0.13, 0.79, 0.1, 0.75, 0.07, 0.7, 0.04, 0.65, 0.02, 0.6, 0.01, 0.55, 0, 0.5, 0, 0.45, 0, 0.4, 0.01, 0.35, 0.02, 0.3, 0.04, 0.25, 0.07, 0.21, 0.1, 0.17, 0.13, 0.13, 0.17, 0.1, 0.21, 0.07, 0.25, 0.04, 0.3, 0.02, 0.35, 0.01, 0.4, 0, 0.45, 0, 0.5, 0, 0.55, 0.01, 0.6, 0.02, 0.65, 0.04, 0.7, 0.07, 0.75, 0.1, 0.79, 0.13, 0.83, 0.17, 0.87, 0.21, 0.9, 0.25, 0.93, 0.3, 0.96, 0.35, 0.98, 0.4, 0.99, 0.45, 1, 0.5, 1]);
    });

    it('Geometry has correct indices', () => {
        expect(geometry.indices).toStrictEqual([0, 60, 61, 0, 61, 1, 1, 61, 62, 1, 62, 2, 2, 62, 63, 2, 63, 3, 3, 63, 64, 3, 64, 4, 4, 64, 65, 4, 65, 5, 5, 65, 66, 5, 66, 6, 6, 66, 67, 6, 67, 7, 7, 67, 68, 7, 68, 8, 8, 68, 69, 8, 69, 9, 9, 69, 70, 9, 70, 10, 10, 70, 71, 10, 71, 11, 11, 71, 72, 11, 72, 12, 12, 72, 73, 12, 73, 13, 13, 73, 74, 13, 74, 14, 14, 74, 75, 14, 75, 15, 15, 75, 76, 15, 76, 16, 16, 76, 77, 16, 77, 17, 17, 77, 78, 17, 78, 18, 18, 78, 79, 18, 79, 19, 19, 79, 80, 19, 80, 20, 20, 80, 81, 20, 81, 21, 21, 81, 82, 21, 82, 22, 22, 82, 83, 22, 83, 23, 23, 83, 84, 23, 84, 24, 24, 84, 85, 24, 85, 25, 25, 85, 86, 25, 86, 26, 26, 86, 87, 26, 87, 27, 27, 87, 88, 27, 88, 28, 28, 88, 89, 28, 89, 29, 29, 89, 90, 29, 90, 30, 30, 90, 91, 30, 91, 31, 31, 91, 92, 31, 92, 32, 32, 92, 93, 32, 93, 33, 33, 93, 94, 33, 94, 34, 34, 94, 95, 34, 95, 35, 35, 95, 96, 35, 96, 36, 36, 96, 97, 36, 97, 37, 37, 97, 98, 37, 98, 38, 38, 98, 99, 38, 99, 39, 39, 99, 100, 39, 100, 40, 40, 100, 101, 40, 101, 41, 41, 101, 102, 41, 102, 42, 42, 102, 103, 42, 103, 43, 43, 103, 104, 43, 104, 44, 44, 104, 105, 44, 105, 45, 45, 105, 106, 45, 106, 46, 46, 106, 107, 46, 107, 47, 47, 107, 108, 47, 108, 48, 48, 108, 109, 48, 109, 49, 49, 109, 110, 49, 110, 50, 50, 110, 111, 50, 111, 51, 51, 111, 112, 51, 112, 52, 52, 112, 113, 52, 113, 53, 53, 113, 114, 53, 114, 54, 54, 114, 115, 54, 115, 55, 55, 115, 116, 55, 116, 56, 56, 116, 117, 56, 117, 57, 57, 117, 118, 57, 118, 58, 58, 118, 119, 58, 119, 59, 59, 119, 120, 59, 120, 60, 60, 120, 121, 60, 121, 61, 123, 124, 122, 124, 125, 122, 125, 126, 122, 126, 127, 122, 127, 128, 122, 128, 129, 122, 129, 130, 122, 130, 131, 122, 131, 132, 122, 132, 133, 122, 133, 134, 122, 134, 135, 122, 135, 136, 122, 136, 137, 122, 137, 138, 122, 138, 139, 122, 139, 140, 122, 140, 141, 122, 141, 142, 122, 142, 143, 122, 143, 144, 122, 144, 145, 122, 145, 146, 122, 146, 147, 122, 147, 148, 122, 148, 149, 122, 149, 150, 122, 150, 151, 122, 151, 152, 122, 152, 153, 122, 153, 154, 122, 154, 155, 122, 155, 156, 122, 156, 157, 122, 157, 158, 122, 158, 159, 122, 159, 160, 122, 160, 161, 122, 161, 162, 122, 162, 163, 122, 163, 164, 122, 164, 165, 122, 165, 166, 122, 166, 167, 122, 167, 168, 122, 168, 169, 122, 169, 170, 122, 170, 171, 122, 171, 172, 122, 172, 173, 122, 173, 174, 122, 174, 175, 122, 175, 176, 122, 176, 177, 122, 177, 178, 122, 178, 179, 122, 179, 180, 122, 180, 181, 122, 181, 182, 122, 182, 183, 122, 184, 186, 185, 184, 187, 186, 184, 188, 187, 184, 189, 188, 184, 190, 189, 184, 191, 190, 184, 192, 191, 184, 193, 192, 184, 194, 193, 184, 195, 194, 184, 196, 195, 184, 197, 196, 184, 198, 197, 184, 199, 198, 184, 200, 199, 184, 201, 200, 184, 202, 201, 184, 203, 202, 184, 204, 203, 184, 205, 204, 184, 206, 205, 184, 207, 206, 184, 208, 207, 184, 209, 208, 184, 210, 209, 184, 211, 210, 184, 212, 211, 184, 213, 212, 184, 214, 213, 184, 215, 214, 184, 216, 215, 184, 217, 216, 184, 218, 217, 184, 219, 218, 184, 220, 219, 184, 221, 220, 184, 222, 221, 184, 223, 222, 184, 224, 223, 184, 225, 224, 184, 226, 225, 184, 227, 226, 184, 228, 227, 184, 229, 228, 184, 230, 229, 184, 231, 230, 184, 232, 231, 184, 233, 232, 184, 234, 233, 184, 235, 234, 184, 236, 235, 184, 237, 236, 184, 238, 237, 184, 239, 238, 184, 240, 239, 184, 241, 240, 184, 242, 241, 184, 243, 242, 184, 244, 243, 184, 245, 244]);
    });
});
