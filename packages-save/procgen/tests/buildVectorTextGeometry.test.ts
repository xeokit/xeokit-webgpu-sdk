import { buildVectorTextGeometry} from "../src/index";
import {LinesPrimitive} from "@xeokit/constants";
import {truncate} from "./testUtils";
import {SDKError} from "@xeokit/core";

describe('buildVectorTextGeometry', function () {
    let geometry;

    it('Build geometry without error', () => {
        geometry = buildVectorTextGeometry({
            origin: [2, 3, 4],
            size: 1,
            text: "buildVectorTextGeometry"
        });
        if (geometry instanceof SDKError) {
            throw geometry;
        }
    });

    it('Geometry has correct primitive type', () => {
        expect(geometry.primitive).toStrictEqual(LinesPrimitive);
    });

    it('Geometry has expected positions', () => {
        const positions = truncate(geometry.positions);
        expect(positions).toStrictEqual([2.16, 3.84, 4, 2.16, 3, 4, 2.16, 3.44, 4, 2.24, 3.52, 4, 2.32, 3.56, 4, 2.44, 3.56, 4, 2.52, 3.52, 4, 2.6, 3.44, 4, 2.64, 3.32, 4, 2.64, 3.24, 4, 2.6, 3.12, 4, 2.52, 3.04, 4, 2.44, 3, 4, 2.32, 3, 4, 2.24, 3.04, 4, 2.16, 3.12, 4, 2.92, 3.56, 4, 2.92, 3.16, 4, 2.96, 3.04, 4, 3.04, 3, 4, 3.16, 3, 4, 3.24, 3.04, 4, 3.36, 3.16, 4, 3.36, 3.56, 4, 3.36, 3, 4, 3.64, 3.84, 4, 3.68, 3.8, 4, 3.72, 3.84, 4, 3.68, 3.88, 4, 3.64, 3.84, 4, 3.68, 3.56, 4, 3.68, 3, 4, 4, 3.84, 4, 4, 3, 4, 4.76, 3.84, 4, 4.76, 3, 4, 4.76, 3.44, 4, 4.68, 3.52, 4, 4.6, 3.56, 4, 4.48, 3.56, 4, 4.4, 3.52, 4, 4.32, 3.44, 4, 4.28, 3.32, 4, 4.28, 3.24, 4, 4.32, 3.12, 4, 4.4, 3.04, 4, 4.48, 3, 4, 4.6, 3, 4, 4.68, 3.04, 4, 4.76, 3.12, 4, 4.96, 3.84, 4, 5.28, 3, 4, 5.6, 3.84, 4, 5.28, 3, 4, 5.76, 3.32, 4, 6.24, 3.32, 4, 6.24, 3.4, 4, 6.2, 3.48, 4, 6.16, 3.52, 4, 6.08, 3.56, 4, 5.96, 3.56, 4, 5.88, 3.52, 4, 5.8, 3.44, 4, 5.76, 3.32, 4, 5.76, 3.24, 4, 5.8, 3.12, 4, 5.88, 3.04, 4, 5.96, 3, 4, 6.08, 3, 4, 6.16, 3.04, 4, 6.24, 3.12, 4, 6.96, 3.44, 4, 6.88, 3.52, 4, 6.8, 3.56, 4, 6.68, 3.56, 4, 6.6, 3.52, 4, 6.52, 3.44, 4, 6.48, 3.32, 4, 6.48, 3.24, 4, 6.52, 3.12, 4, 6.6, 3.04, 4, 6.68, 3, 4, 6.8, 3, 4, 6.88, 3.04, 4, 6.96, 3.12, 4, 7.28, 3.84, 4, 7.28, 3.16, 4, 7.32, 3.04, 4, 7.4, 3, 4, 7.48, 3, 4, 7.16, 3.56, 4, 7.44, 3.56, 4, 7.88, 3.56, 4, 7.8, 3.52, 4, 7.72, 3.44, 4, 7.68, 3.32, 4, 7.68, 3.24, 4, 7.72, 3.12, 4, 7.8, 3.04, 4, 7.88, 3, 4, 8, 3, 4, 8.08, 3.04, 4, 8.16, 3.12, 4, 8.2, 3.24, 4, 8.2, 3.32, 4, 8.16, 3.44, 4, 8.08, 3.52, 4, 8, 3.56, 4, 7.88, 3.56, 4, 8.48, 3.56, 4, 8.48, 3, 4, 8.48, 3.32, 4, 8.52, 3.44, 4, 8.6, 3.52, 4, 8.68, 3.56, 4, 8.8, 3.56, 4, 9.16, 3.84, 4, 9.16, 3, 4, 8.88, 3.84, 4, 9.44, 3.84, 4, 9.6, 3.32, 4, 10.08, 3.32, 4, 10.08, 3.4, 4, 10.04, 3.48, 4, 10, 3.52, 4, 9.92, 3.56, 4, 9.8, 3.56, 4, 9.72, 3.52, 4, 9.64, 3.44, 4, 9.6, 3.32, 4, 9.6, 3.24, 4, 9.64, 3.12, 4, 9.72, 3.04, 4, 9.8, 3, 4, 9.92, 3, 4, 10, 3.04, 4, 10.08, 3.12, 4, 10.32, 3.56, 4, 10.76, 3, 4, 10.76, 3.56, 4, 10.32, 3, 4, 11.08, 3.84, 4, 11.08, 3.16, 4, 11.12, 3.04, 4, 11.2, 3, 4, 11.28, 3, 4, 10.96, 3.56, 4, 11.24, 3.56, 4, 12.08, 3.64, 4, 12.04, 3.72, 4, 11.96, 3.8, 4, 11.88, 3.84, 4, 11.72, 3.84, 4, 11.64, 3.8, 4, 11.56, 3.72, 4, 11.52, 3.64, 4, 11.48, 3.52, 4, 11.48, 3.32, 4, 11.52, 3.2, 4, 11.56, 3.12, 4, 11.64, 3.04, 4, 11.72, 3, 4, 11.88, 3, 4, 11.96, 3.04, 4, 12.04, 3.12, 4, 12.08, 3.2, 4, 12.08, 3.32, 4, 11.88, 3.32, 4, 12.08, 3.32, 4, 12.32, 3.32, 4, 12.8, 3.32, 4, 12.8, 3.4, 4, 12.76, 3.48, 4, 12.72, 3.52, 4, 12.64, 3.56, 4, 12.52, 3.56, 4, 12.44, 3.52, 4, 12.36, 3.44, 4, 12.32, 3.32, 4, 12.32, 3.24, 4, 12.36, 3.12, 4, 12.44, 3.04, 4, 12.52, 3, 4, 12.64, 3, 4, 12.72, 3.04, 4, 12.8, 3.12, 4, 13.24, 3.56, 4, 13.16, 3.52, 4, 13.08, 3.44, 4, 13.04, 3.32, 4, 13.04, 3.24, 4, 13.08, 3.12, 4, 13.16, 3.04, 4, 13.24, 3, 4, 13.36, 3, 4, 13.44, 3.04, 4, 13.52, 3.12, 4, 13.56, 3.24, 4, 13.56, 3.32, 4, 13.52, 3.44, 4, 13.44, 3.52, 4, 13.36, 3.56, 4, 13.24, 3.56, 4, 13.84, 3.56, 4, 13.84, 3, 4, 13.84, 3.4, 4, 13.96, 3.52, 4, 14.04, 3.56, 4, 14.16, 3.56, 4, 14.24, 3.52, 4, 14.28, 3.4, 4, 14.28, 3, 4, 14.28, 3.4, 4, 14.4, 3.52, 4, 14.48, 3.56, 4, 14.6, 3.56, 4, 14.68, 3.52, 4, 14.72, 3.4, 4, 14.72, 3, 4, 15, 3.32, 4, 15.48, 3.32, 4, 15.48, 3.4, 4, 15.44, 3.48, 4, 15.4, 3.52, 4, 15.32, 3.56, 4, 15.2, 3.56, 4, 15.12, 3.52, 4, 15.04, 3.44, 4, 15, 3.32, 4, 15, 3.24, 4, 15.04, 3.12, 4, 15.12, 3.04, 4, 15.2, 3, 4, 15.32, 3, 4, 15.4, 3.04, 4, 15.48, 3.12, 4, 15.8, 3.84, 4, 15.8, 3.16, 4, 15.84, 3.04, 4, 15.92, 3, 4, 16, 3, 4, 15.68, 3.56, 4, 15.96, 3.56, 4, 16.24, 3.56, 4, 16.24, 3, 4, 16.24, 3.32, 4, 16.28, 3.44, 4, 16.36, 3.52, 4, 16.44, 3.56, 4, 16.56, 3.56, 4, 16.68, 3.56, 4, 16.92, 3, 4, 17.16, 3.56, 4, 16.92, 3, 4, 16.84, 2.84, 4, 16.76, 2.76, 4, 16.68, 2.72, 4, 16.64, 2.72, 4]);
    });

    it('Geometry has correct indices', () => {
        expect(geometry.indices).toStrictEqual([0, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23, 24, 25, 26, 26, 27, 27, 28, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 50, 51, 52, 53, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 85, 86, 86, 87, 87, 88, 88, 89, 90, 91, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 109, 110, 111, 112, 112, 113, 113, 114, 114, 115, 116, 117, 118, 119, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 137, 138, 139, 140, 141, 142, 142, 143, 143, 144, 144, 145, 146, 147, 148, 149, 149, 150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 156, 156, 157, 157, 158, 158, 159, 159, 160, 160, 161, 161, 162, 162, 163, 163, 164, 164, 165, 165, 166, 167, 168, 169, 170, 170, 171, 171, 172, 172, 173, 173, 174, 174, 175, 175, 176, 176, 177, 177, 178, 178, 179, 179, 180, 180, 181, 181, 182, 182, 183, 183, 184, 184, 185, 186, 187, 187, 188, 188, 189, 189, 190, 190, 191, 191, 192, 192, 193, 193, 194, 194, 195, 195, 196, 196, 197, 197, 198, 198, 199, 199, 200, 200, 201, 201, 202, 203, 204, 205, 206, 206, 207, 207, 208, 208, 209, 209, 210, 210, 211, 212, 213, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 219, 220, 220, 221, 221, 222, 222, 223, 223, 224, 224, 225, 225, 226, 226, 227, 227, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 234, 235, 236, 237, 237, 238, 238, 239, 239, 240, 241, 242, 243, 244, 245, 246, 246, 247, 247, 248, 248, 249, 250, 251, 252, 253, 253, 254, 254, 255, 255, 256, 256, 257]);
    });
});
