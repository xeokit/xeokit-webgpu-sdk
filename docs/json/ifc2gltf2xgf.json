{
	"id": 0,
	"name": "@xeokit/ifc2gltf2xgf",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"comment": {
		"summary": [
			{
				"kind": "text",
				"text": "[![npm version](https://badge.fury.io/js/%40xeokit%2Fgltfviewer.svg)](https://badge.fury.io/js/%40xeokit%2Fgltfviewer)\n[![](https://data.jsdelivr.com/v1/package/npm/@xeokit/gltfviewer/badge)](https://www.jsdelivr.com/package/npm/@xeokit/gltfviewer)\n\n<img  style=\"padding:0px; padding-top:30px; padding-bottom:10px; height:130px;\" src=\"media://images/xeokit_logo_mesh.png\"/>\n\n# xeokit ifc2gltf -> XGF Conversion Tool\n\n---\n\n***CLI tools to convert glTF models into xeokit's compact [XGF](https://xeokit.github.io/sdk/docs/pages/GLOSSARY.html#xgf) geometry format.***\n\n---\n\n* Post-converts the output of "
			},
			{
				"kind": "code",
				"text": "`ifc2gltf`"
			},
			{
				"kind": "text",
				"text": " for optimal loading into a xeokit Viewer.\n* Converts glTF files to XGF, xeokit's compact binary geometry format.\n* Converts JSON MetaModel files to JSON MetaData files, xeokit's newer data model format.\n* Generates all XGF versions.\n\n# Installation\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nnpm install @xeokit/ifc2gltf2xgf\n````"
			},
			{
				"kind": "text",
				"text": "\n\n# Usage\n\n## Converting a batch of glTF + MetaModel files\n\nUse the "
			},
			{
				"kind": "code",
				"text": "`ifc2gltf2xgf`"
			},
			{
				"kind": "text",
				"text": " tool to convert a batch of glTF+MetaModel files into a batch of XGF+DataModel files.\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nnode ifc2gltf2xgf.js -h\nUsage: ifc2gltf2xgf [options]\n\nCLI to batch-convert a manifest of glTF/GLB files into XGF SceneModel files and/or JSON DataModel files\n\nOptions:\n  -v, --version          output the version number\n  -i, --input [file]     path to input manifest of glTF+JSON files (required)\n  -o, --output [file]    path to target manifest of XGF+JSON files (required)\n  -f, --format [number]  target XGF version (optional) - supported XGF version is 1, default is 1\n  -l, --log              enable logging (optional)\n  -h, --help             display help for command\n````"
			},
			{
				"kind": "text",
				"text": "\n\nOur input "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/ifc2gltf2xgf!Ifc2gltfManifestParams | Ifc2gltfManifestParams"
			},
			{
				"kind": "text",
				"text": " file, "
			},
			{
				"kind": "code",
				"text": "`ifc2gltfManifest.json`"
			},
			{
				"kind": "text",
				"text": ", is shown below.\n\nEach file in "
			},
			{
				"kind": "code",
				"text": "`gltfOutFiles`"
			},
			{
				"kind": "text",
				"text": " is a glTF, and each file in "
			},
			{
				"kind": "code",
				"text": "`metadataOutFiles`"
			},
			{
				"kind": "text",
				"text": " is a "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/metamodel!MetaModelParams | ModelModelParams"
			},
			{
				"kind": "text",
				"text": " JSON file.\n\n"
			},
			{
				"kind": "code",
				"text": "````json\n{\n    \"inputFile\": \"model.ifc\",\n    \"converterApplication\": \"ifc2gltfcxconverter\",\n    \"converterApplicationVersion\": \"4.14\",\n    \"conversionDate\": \"2024-09-13 21:43:58\",\n    \"gltfOutFiles\": [\n        \"model.glb\",\n        \"model2.glb\",\n        \"model3.glb\"\n    ],\n    \"metadataOutFiles\": [\n        \"model.json\",\n        \"model2.json\"\n        \"model2.json\"\n    ],\n    \"numCreatedGltfMeshes\": 871,\n    \"numCreatedMetaObjects\": 246,\n    \"numExportedPropertySetsOrElementQuantities\": 0,\n    \"modelBoundsMax\": [\n        9.041500091552734,\n        5.017477452754974,\n        9.0\n    ],\n    \"modelBoundsMin\": [\n        -0.24150000512599945,\n        -22.1827335357666,\n        -1.550000011920929\n    ],\n    \"generalMessages\": [\n        \"Detected IFC version: IFC4X3\"\n    ],\n    \"warnings\": [],\n    \"errors\": []\n}\n````"
			},
			{
				"kind": "text",
				"text": "\n\nWe invoke "
			},
			{
				"kind": "code",
				"text": "`ifc2gltf2xgf`"
			},
			{
				"kind": "text",
				"text": " with paths to a source "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/ifc2gltf2xgf!Ifc2gltfManifestParams | Ifc2gltfManifestParams"
			},
			{
				"kind": "text",
				"text": " file\nto read and a target "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/core!ModelChunksManifestParams | ModelChunksManifestParams"
			},
			{
				"kind": "text",
				"text": " file to write:\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nnode ifc2gltf2xgf -i ifc2gltfManifest.json -o xgfManifest.json\n````"
			},
			{
				"kind": "text",
				"text": "\n\nIf we wanted, we could load "
			},
			{
				"kind": "code",
				"text": "`ifc2gltfManifest.json`"
			},
			{
				"kind": "text",
				"text": " into a SceneModel and DataModel, using loadGLTF, loadMetaModel and ModelChunksLoader:\n\n"
			},
			{
				"kind": "code",
				"text": "```` javascript\nimport {Scene} from \"@xeokit/scene}\";\nimport {Data} from \"@xeokit/data}\";\nimport {ModelChunksLoader} from \"@xeokit/modelChunksLoader}\";\nimport {loadGLTF} from \"@xeokit/gltf}\";\nimport {loadMetaModel} from \"@xeokit/metamodel}\";\n\nconst scene = new Scene();\nconst data = new Data();\n\nconst sceneModel = scene.createModel({\n    id: \"myModel\"\n});\n\nconst dataModel = data.createModel({\n    id: \"myModel\"\n});\n\nconst modelChunksLoader = new ModelChunksLoader({\n     sceneModelLoader: loadGLTF,\n     dataModelLoader: loadMetaModel\n});\n\nfetch(`ifc2gltfManifest.json`).then(response => {\n     response\n     .json()\n     .then(ifc2gltfManifest => {\n\n         const modelChunksManifest = xeokit.ifc2gltf2xgf.convertIfc2gltfManifest(ifc2gltfManifest);\n\n         modelChunksLoader.load({\n             modelChunksManifest,\n             baseDir: \".\",\n             sceneModel,\n             dataModel\n         }).then(() =>{\n             sceneModel.build();\n             dataModel.build();\n         });\n     });\n````"
			},
			{
				"kind": "text",
				"text": "\n\nOur "
			},
			{
				"kind": "code",
				"text": "`xgfManifest.json`"
			},
			{
				"kind": "text",
				"text": " output file is shown below. This file has the format of "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/core!ModelChunksManifestParams | ModelChunksManifestParams"
			},
			{
				"kind": "text",
				"text": " and is shown below.\n\nEach file referenced in "
			},
			{
				"kind": "code",
				"text": "`sceneModelFiles`"
			},
			{
				"kind": "text",
				"text": " is an XGF geometry file (see "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "\"@xeokit/xgf\" | @xeokit/xgf"
			},
			{
				"kind": "text",
				"text": "). Each file referenced\nin "
			},
			{
				"kind": "code",
				"text": "`dataModelFiles`"
			},
			{
				"kind": "text",
				"text": " is a JSON data model file with the format of "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/metamodel!MetaModelParams | ModelModelParams"
			},
			{
				"kind": "text",
				"text": ".\n\n"
			},
			{
				"kind": "code",
				"text": "````json\n{\n    sceneModelMIMEType: \"arraybuffer\",\n    sceneModelFiles: [\n        \"model.xgf\",\n        \"model2.xgf\"\n        \"model3.xgf\"\n    ],\n    dataModelFiles: [\n        \"model.json\",\n        \"model2.json\"\n        \"model3.json\"\n    ]\n}\n````"
			},
			{
				"kind": "text",
				"text": "\n\nIf we wanted, we could now load "
			},
			{
				"kind": "code",
				"text": "`xgfManifest.json`"
			},
			{
				"kind": "text",
				"text": " into a SceneModel and DataModel, using loadGLTF, loadDataModel and ModelChunksLoader:\n\n"
			},
			{
				"kind": "code",
				"text": "````\nimport {Scene} from \"@xeokit/scene}\";\nimport {Data} from \"@xeokit/data}\";\nimport {ModelChunksLoader} from \"@xeokit/modelChunksLoader}\";\nimport {loadGLTF} from \"@xeokit/gltf}\";\nimport {loadDataModel} from \"@xeokit/data}\";\n\nconst scene = new Scene();\nconst data = new Data();\n\nconst sceneModel = scene.createModel({\n    id: \"myModel\"\n});\n\nconst dataModel = data.createModel({\n    id: \"myModel\"\n});\n\nconst modelChunksLoader = new ModelChunksLoader({\n    sceneModelLoader: loadXGF,\n    dataModelLoader: loadDataModel\n});\n\nfetch(`gxfManifest.json`).then(response => {\n     response\n     .json()\n     .then(gxfManifest => {\n\n         modelChunksLoader.load({\n             modelChunksManifest: gxfManifest,\n             baseDir: \".\",\n             sceneModel,\n             dataModel\n         }).then(() =>{\n             sceneModel.build();\n             dataModel.build();\n         });\n     });\n````"
			}
		]
	},
	"children": [
		{
			"id": 1,
			"name": "Ifc2gltfManifestParams",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Defines the format the glTF file manifests output by ifc2gltf."
					}
				]
			},
			"children": [
				{
					"id": 2,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 3,
							"name": "new Ifc2gltfManifestParams",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1,
								"name": "Ifc2gltfManifestParams",
								"package": "@xeokit/ifc2gltf2xgf"
							}
						}
					]
				},
				{
					"id": 4,
					"name": "gltfOutFiles",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Paths to glTF files created by if2gltf."
							}
						]
					},
					"sources": [
						{
							"fileName": "Ifc2gltfManifestParams.ts",
							"line": 9,
							"character": 4,
							"url": "https://github.com/xeokit/sdk/blob/94e984ea5d918c1c891a810c4d9ada15e09f6cf0/packages/ifc2gltf2xgf/src/Ifc2gltfManifestParams.ts#L9"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 5,
					"name": "metadataOutFiles",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Paths to JSON metadata files created by if2gltf.\n\nMetadata file format is described by "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "@xeokit/metamodel!MetaModelParams | MetaModelParams"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "Ifc2gltfManifestParams.ts",
							"line": 16,
							"character": 4,
							"url": "https://github.com/xeokit/sdk/blob/94e984ea5d918c1c891a810c4d9ada15e09f6cf0/packages/ifc2gltf2xgf/src/Ifc2gltfManifestParams.ts#L16"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						2
					]
				},
				{
					"title": "Properties",
					"children": [
						4,
						5
					]
				}
			],
			"sources": [
				{
					"fileName": "Ifc2gltfManifestParams.ts",
					"line": 4,
					"character": 13,
					"url": "https://github.com/xeokit/sdk/blob/94e984ea5d918c1c891a810c4d9ada15e09f6cf0/packages/ifc2gltf2xgf/src/Ifc2gltfManifestParams.ts#L4"
				}
			]
		},
		{
			"id": 6,
			"name": "convertIfc2gltfManifest",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "convertIfc2gltfManifest.ts",
					"line": 8,
					"character": 9,
					"url": "https://github.com/xeokit/sdk/blob/94e984ea5d918c1c891a810c4d9ada15e09f6cf0/packages/ifc2gltf2xgf/src/convertIfc2gltfManifest.ts#L8"
				}
			],
			"signatures": [
				{
					"id": 7,
					"name": "convertIfc2gltfManifest",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Converts a file manifest from "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "@xeokit/ifc2gltf2xgf!Ifc2gltfManifestParams | Ifc2gltfManifestParams"
							},
							{
								"kind": "text",
								"text": " to\n"
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "@xeokit/core!ModelChunksManifestParams | ModelChunksManifestParams"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "convertIfc2gltfManifest.ts",
							"line": 8,
							"character": 9,
							"url": "https://github.com/xeokit/sdk/blob/94e984ea5d918c1c891a810c4d9ada15e09f6cf0/packages/ifc2gltf2xgf/src/convertIfc2gltfManifest.ts#L8"
						}
					],
					"parameters": [
						{
							"id": 8,
							"name": "ifc2gltfManifestParams",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 1,
								"name": "Ifc2gltfManifestParams",
								"package": "@xeokit/ifc2gltf2xgf"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../core/src/ModelChunksManifestParams.ts",
							"qualifiedName": "ModelChunksManifestParams"
						},
						"name": "ModelChunksManifestParams",
						"package": "@xeokit/core"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				1
			]
		},
		{
			"title": "Functions",
			"children": [
				6
			]
		}
	],
	"packageName": "@xeokit/ifc2gltf2xgf",
	"packageVersion": "0.1.0",
	"readme": [
		{
			"kind": "text",
			"text": "#"
		}
	],
	"symbolIdMap": {
		"0": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "src/Ifc2gltfManifestParams.ts",
			"qualifiedName": "Ifc2gltfManifestParams"
		},
		"4": {
			"sourceFileName": "src/Ifc2gltfManifestParams.ts",
			"qualifiedName": "Ifc2gltfManifestParams.gltfOutFiles"
		},
		"5": {
			"sourceFileName": "src/Ifc2gltfManifestParams.ts",
			"qualifiedName": "Ifc2gltfManifestParams.metadataOutFiles"
		},
		"6": {
			"sourceFileName": "src/convertIfc2gltfManifest.ts",
			"qualifiedName": "convertIfc2gltfManifest"
		},
		"7": {
			"sourceFileName": "src/convertIfc2gltfManifest.ts",
			"qualifiedName": "convertIfc2gltfManifest"
		},
		"8": {
			"sourceFileName": "src/convertIfc2gltfManifest.ts",
			"qualifiedName": "ifc2gltfManifestParams"
		}
	}
}