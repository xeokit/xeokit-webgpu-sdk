{
	"id": 0,
	"name": "@xeokit/webifc2xgf",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"comment": {
		"summary": [
			{
				"kind": "text",
				"text": "[![npm version](https://badge.fury.io/js/%40xeokit%2Fgltfviewer.svg)](https://badge.fury.io/js/%40xeokit%2Fgltfviewer)\n[![](https://data.jsdelivr.com/v1/package/npm/@xeokit/gltfviewer/badge)](https://www.jsdelivr.com/package/npm/@xeokit/gltfviewer)\n\n<img style=\"width:150px; padding-top:20px; padding-bottom: 20px;\" src=\"media://images/ifc_logo.png\"/>\n\n<br>\n\n## webifc2xgf\n\nNodeJS CLI tool that uses WebIFC to convert small IFC files into xeokit's compact [XGF](https://xeokit.github.io/sdk/docs/pages/GLOSSARY.html#xgf) geometry format.\n\n## Features\n\n* Uses WebIFC to convert small IFC files to xeokit's XGF geometry format.\n* Optionally creates an additional JSON file containing a simple data model that expresses the IFC semantics.\n* Supports all XGF versions.\n\n## Installation\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nnpm install @xeokit/webifc2xgf\n````"
			},
			{
				"kind": "text",
				"text": "\n\n## Usage\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nnode webifc2xgf.js -h\nUsage: webifc2xgf [options]\n\nCLI that uses WebIFC to convert small IFC files into xeokit's compact XGF format\n\nOptions:\n  -v, --version              output the version number\n  -i, --source [file]        path to source IFC file\n  -s, --scenemodel [file]    path to target XGF SceneModel file\n  -d, --datamodel [file]     path to target JSON DataModel file (optional)\n  -f, --format [number]      target XGF version - supported XGF version is 1, default is 1\n  -h, --help                 display help for command\n````"
			},
			{
				"kind": "text",
				"text": "\n\n### Converting IFC geometry\n\nThe invocation below converts an IFC file to XGF. The XGF objects will have geometries and material colors\nparsed from the IFC. The XGF file can then be loaded into a xeokit "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/scene!SceneModel | SceneModel"
			},
			{
				"kind": "text",
				"text": "\nusing "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/xgf!loadXGF | loadXGF()"
			},
			{
				"kind": "text",
				"text": ".\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nnode webifc2xgf -i duplex.ifc -o duplex.xgf\n````"
			},
			{
				"kind": "text",
				"text": "\n\n### Converting IFC geometry and semantic data\n\nIn the next example, we'll convert an IFC file to XGF, while also creating a JSON file that defines\na simple data model that expresses the IFC semantic data. The JSON file can\nthen be loaded into a xeokit "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/data!DataModel | DataModel"
			},
			{
				"kind": "text",
				"text": "\nusing "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/data!Data.createModel | Data.createModel()"
			},
			{
				"kind": "text",
				"text": ".\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nnode webifc2xgf -i duplex.ifc -s duplex.xgf -d duplex.json\n````"
			},
			{
				"kind": "text",
				"text": "\n\n### Converting IFC to a specific XGF version\n\nIn our previous examples, we converted to the latest version of XGF by default. In the next example, we'll convert an\nIFC file to a specific version of XGF.\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nwebifc2xgf -i duplex.ifc -s duplex.xgf -f 1\n````"
			}
		]
	},
	"packageName": "@xeokit/webifc2xgf",
	"packageVersion": "0.1.0",
	"readme": [
		{
			"kind": "text",
			"text": "#"
		}
	],
	"symbolIdMap": {
		"0": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": ""
		}
	}
}