{
	"id": 0,
	"name": "@xeokit/gltf2xgf",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"comment": {
		"summary": [
			{
				"kind": "text",
				"text": "[![npm version](https://badge.fury.io/js/%40xeokit%2Fgltfviewer.svg)](https://badge.fury.io/js/%40xeokit%2Fgltfviewer)\n[![](https://data.jsdelivr.com/v1/package/npm/@xeokit/gltfviewer/badge)](https://www.jsdelivr.com/package/npm/@xeokit/gltfviewer)\n\n<img  style=\"padding:0px; padding-top:30px; padding-bottom:10px; height:130px;\" src=\"media://images/xeokit_logo_mesh.png\"/>\n\n# xeokit glTF -> XGF Conversion Tool\n\n---\n\n***CLI tools to convert glTF models into xeokit's compact [XGF](https://xeokit.github.io/sdk/docs/pages/GLOSSARY.html#xgf) geometry format.***\n\n---\n\n* Converts glTF files to XGF, xeokit's compact binary format for large models.\n* Optionally creates an additional JSON file containing a data model that expresses the glTF scene hierarchy.\n* Backward support for all XGF versions.\n* XGF does not contain textures - only geometry and color.\n\n# Installation\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nnpm install @xeokit/gltf2xgf\n````"
			},
			{
				"kind": "text",
				"text": "\n\n# Usage\n\n## Converting a glTF file\n\nUse the "
			},
			{
				"kind": "code",
				"text": "`gltf2xgf`"
			},
			{
				"kind": "text",
				"text": " CLI tool to convert a single glTF file into a single XGF file, plus an optional JSON file containing\na simple DataModel derived from the glTF "
			},
			{
				"kind": "code",
				"text": "`scene`"
			},
			{
				"kind": "text",
				"text": " "
			},
			{
				"kind": "code",
				"text": "`node`"
			},
			{
				"kind": "text",
				"text": " hierarchy.\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nnode gltf2xgf.js -h\nUsage: gltf2xgf [options]\n\nCLI to convert glTF files into xeokit's compact XGF format\n\nOptions:\n  -v, --version            output the version number\n  -i, --source [file]      path to source glTF file\n  -s, --scenemodel [file]  path to target XGF file\n  -d, --datamodel [file]   path to target JSON data model file, extracted from glTF scene hierarchy (optional)\n  -f, --format [number]    target XGF version - supported XGF version is 1, default is 1\n  -h, --help               display help for command\n````"
			},
			{
				"kind": "text",
				"text": "\n\nThe example below converts a binary glTF file to XGF. The XGF objects will have geometries and material colors\nparsed from the glTF. The XGF file can then be loaded into a xeokit "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/scene!SceneModel | SceneModel"
			},
			{
				"kind": "text",
				"text": "\nusing the "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/xgf!loadXGF | loadXGF()"
			},
			{
				"kind": "text",
				"text": " function. We recommend converting binary glTF for best performance.\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nnode gltf2xgf -i duplex.glb -s duplex.xgf\n````"
			},
			{
				"kind": "text",
				"text": "\n\n## Converting a glTF file and extracting scene hierarchy\n\nIn the next example, we'll convert a binary glTF file to XGF, while also creating a JSON file that defines\na simple data model that expresses the hierarchy of the "
			},
			{
				"kind": "code",
				"text": "`nodes`"
			},
			{
				"kind": "text",
				"text": " within the glTF "
			},
			{
				"kind": "code",
				"text": "`scene`"
			},
			{
				"kind": "text",
				"text": ". The JSON file can\nthen be loaded into a xeokit "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/data!DataModel | DataModel"
			},
			{
				"kind": "text",
				"text": "\nusing "
			},
			{
				"kind": "inline-tag",
				"tag": "@link",
				"text": "@xeokit/data!Data.createModel | Data.createModel()"
			},
			{
				"kind": "text",
				"text": ".\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\nnode gltf2xgf -i duplex.glb -s duplex.xgf -d duplex.json\n````"
			},
			{
				"kind": "text",
				"text": "\n\n## Converting a glTF file to a specific XGF version\n\nIn our previous examples, we converted to the latest version of XGF by default. In the next example, we'll convert a\nbinary glTF file to a specific version of XGF. The XGF format is expected to evolve in the future, so this feature\nensures backward-compatibility.\n\n"
			},
			{
				"kind": "code",
				"text": "````bash\ngltf2xgf -i duplex.glb -s duplex.xgf -f 1\n````"
			}
		]
	},
	"packageName": "@xeokit/gltf2xgf",
	"packageVersion": "0.1.0",
	"readme": [
		{
			"kind": "text",
			"text": "#"
		}
	],
	"symbolIdMap": {
		"0": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": ""
		}
	}
}