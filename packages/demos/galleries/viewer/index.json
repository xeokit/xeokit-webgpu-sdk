{
  "pages": {
    "SceneModel_DataModel_build_table": {
      "description": "Building and viewing a SceneModel and a DataModel",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene, and one View, along with a Data object. In the Scene, build a simple kitchen table SceneModel containing five SceneObjects, to represent the table top and four legs. In the Data object, build a DataModel that classifies the SceneModel.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject",
        "Data",
        "DataModel",
        "DataObject"
      ]
    },
    "SceneModel_DataModel_fromJSON_IfcOpenHouse4": {
      "description": "Loading an IFC model from JSON into a SceneModel and a DataModel",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene, one View and a Data. In the Scene, build a SceneModel.  The SceneModel has five SceneObjects, five SceneMeshs, and one box-shaped SceneGeometry containing triangle primitives. In the Data, create a DataModel with DataObjects to classify the SceneObjects.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject",
        "Data",
        "DataModel",
        "DataObject"
      ]
    },
    "SceneModel_build_box": {
      "description": "Building and viewing a box-shaped SceneModel",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel containing a SceneObject, a SceneMesh, and a box-shaped SceneGeometry containing triangle primitives.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "SceneModel_build_box_compressedGeometry": {
      "description": "Building and viewing a box-shaped SceneModel, defined using compressed geometry",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel containing a SceneObject, a SceneMesh, and a box-shaped SceneGeometry containing triangle primitives, which we'll create from SceneGeometryCompressedParams.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject",
        "SceneGeometryCompressedParams"
      ],
      "template": "basicPage"
    },
    "SceneModel_build_geometries": {
      "description": "Building and viewing a SceneModel containing various geometry types",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel containing a set of SceneMeshs that represent various geometric primitives.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "SceneModel_build_lines": {
      "description": "Building and viewing a SceneModel containing line geometry",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with five SceneObject and SceneMeshs that use a SceneGeometry with lines primitives.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ],
      "template": "basicPage"
    },
    "SceneModel_build_points": {
      "description": "Building and viewing a SceneModel containing points geometry",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with a SceneObject, a SceneMesh, and a SceneGeometry with points primitives.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "SceneModel_build_table": {
      "description": "Building and viewing a table-shaped SceneModel",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel that represents a simple kitchen table. The SceneModel then has five SceneObjects, five SceneMeshs, and one box-shaped SceneGeometry containing triangle primitives.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "SceneModel_build_triangle": {
      "description": "Building and viewing a SceneModel containing a single 3D triangle",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with a SceneObject, a SceneMesh, and a SceneGeometry that describes a single triangle.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "SceneModel_build_triangle_checkErrors": {
      "description": "Building and viewing a SceneModel containing a 3D triangle, while checking for errors",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with a SceneObject, a SceneMesh, and a SceneGeometry that describes a single triangle. Check for errors after each step.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "SceneModel_fromJSON_box": {
      "description": "Building and viewing a box-shaped SceneModel, from JSON",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel containing a simple box-shaped triangle mesh, loaded from JSON. The Viewer then draws the box in the View's canvas.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "SceneModel_fromJSON_box_compressedGeometry": {
      "description": "Building and viewing a box-shaped SceneModel, from JSON, using compressed geometry",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel containing a simple box-shaped triangle mesh, loaded from JSON, using compressed geometry. ",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject",
        "SceneGeometryCompressedParams"
      ]
    },
    "SceneModel_fromJSON_geometries": {
      "description": "Building and viewing a SceneModel containing various geometry types, from JSON",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel from JSON, containing a set of SceneMeshs that represent various geometric primitives.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "SceneModel_fromJSON_table": {
      "description": "Building and viewing a table-shaped SceneModel, from JSON",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel that represents a simple kitchen table, from JSON. The SceneModel has five SceneObjects, five SceneMeshs, and one box-shaped SceneGeometry containing triangle primitives.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "SceneModel_fromJSON_triangle": {
      "description": "Building and viewing a simple SceneModel, from JSON",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel that contains a single triangle, from JSON. The SceneModel has one SceneObject, one SceneMesh, and one SceneGeometry, which contains the triangle geometry.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "SceneModel_retainedFalse": {
      "description": "Building and viewing a SceneModel without retaining geometry in Browser memory",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel containing a table-shaped model. Configure the SceneModel with retained: false, which causes it to not retain SceneObject, SceneMesh and SceneGeometrys in browser memory, resulting in a smaller memory footprint. The Viewer then draws the model in the View's canvas, while the model's geometry and materials reside entirely in GPU memory.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "TreeView_AggregationHierarchy": {
      "description": "Adding a TreeView to a Viewer, to show aggregation hiererchies",
      "summary": "",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject",
        "TreeView"
      ]
    },
    "TreeView_GroupsHierarchy": {
      "description": "Adding a TreeView to a Viewer, to show group hiererchies",
      "summary": "",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject",
        "TreeView"
      ]
    },
    "TreeView_TypesHierarchy": {
      "description": "Adding a TreeView to a Viewer, to show nodes grouped by type",
      "summary": "",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject",
        "TreeView"
      ]
    },
    "View_multiView_SceneModel_build_table": {
      "description": "Building a table-shaped SceneModel in multiple Views",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and three Views. In the Scene, build a SceneModel containing a simple table-shaped model. The Viewer then draws the model in each View's canvas. Meanwhile, orbit the primary View's Camera.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "View_multiView_drawBox": {
      "description": "Building a box-shaped SceneModel in multiple Views",
      "summary": "In this example, we create a Viewer configured with a WebGLRenderer, a Scene, and multiple Views. In the Scene, we build a SceneModel containing a simple box-shaped triangle mesh. The Viewer then draws the box in each View's canvas. While this is happening, we orbit each View's Camera and animate the colors of the object in the main View.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "View_multiView_loadWebIFC": {
      "description": "Viewing an IFC model in multiple Views",
      "summary": "In this example, we create a Viewer configured with a WebGLRenderer, a Scene, and three Views, along with a Data. In the Scene, we create a SceneModel, and in the Data we create a DataModel. Then we use loadWebIFC to load an IFC file into the SceneModel and DataModel. The Viewer then draws the IFC model in each View's canvas.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject",
        "loadWebIFC"
      ]
    },
    "View_multiView_renderModes": {
      "description": "Viewing an IFC model in multiple Views, with different render modes",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and three Views, along with a Data. In the Scene, we create a SceneModel, and in the Data we create a DataModel. Then we load JSON into the SceneModel and DataModel. The Viewer then draws the model in each View's canvas. We also set the renderMode of the first View to QualityRender and the other two Views to FastRender.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject",
        "loadWebIFC"
      ]
    },
    "View_worldAxis_SceneModel": {
      "description": "Viewing a SceneModel with +Z configured as up",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene and a View. Configure the View's 3D coordinate system to use +Z as the direction of 'up'. In the Scene, build a SceneModel that represents a simple kitchen table. The Viewer then draws the SceneModel in the View.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "View_worldAxis_loadCityJSON": {
      "description": "Viewing a CityJSON model with +Z configured as up direction",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene and a View. Create a Data. Within the View, configure its Camera's worldAxis to effectively make +Z the direction of 'up' within the View's 3D World coordinate system. In the Scene, create a SceneModel, and in the Data create a DataModel. Then use loadCityJSON to load a CityJSON file into the SceneModel and DataModel. The Viewer then draws the CityJSON model in the View.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject",
        "loadCityJSON"
      ]
    },
    "Viewer_drawTriangle": {
      "description": "Building and viewing a SceneModel containing a single 3D triangle",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with a SceneObject, a SceneMesh, and a SceneGeometry that describes a single triangle.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "Viewer_drawTriangle_checkErrors": {
      "description": "Building and viewing a SceneModel containing a 3D triangle, while checking for errors",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with a SceneObject, a SceneMesh, and a SceneGeometry that describes a single triangle. Check for errors after each step.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "Viewer_drawTriangle_getEvents": {
      "description": "Drawing a triangle, logging all events",
      "summary": "Create a Viewer configured with a WebGLRenderer and a Scene. Then build a SceneModel with a simple triangle geometry, while logging all events fired by the Viewer.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "CameraControl",
        "SceneModel",
        "SceneGeometry",
        "SceneMesh",
        "SceneObject"
      ]
    },
    "Viewer_getCapabilities": {
      "description": "Querying Viewer capabilities",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene, and one View. Draw a triangle, then query the Capabilities of the Viewer.",
      "components": [
        "Scene",
        "WebGLRenderer",
        "Viewer",
        "View",
        "SceneModel",
        "SceneObject",
        "Capabilities"
      ]
    }
  }
}
